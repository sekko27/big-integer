"use strict";

const chai = require('chai');
const assert = chai.assert;
const BigInteger = require('../../../src/domain/models/BigInteger');

function assertToString(expectedValue, actualValue) {
    let expectedAbsoluteValue = expectedValue;
    let expectedNegative = false;
    if (expectedValue.charAt(0) == '-') {
        expectedAbsoluteValue = expectedValue.substr(1);
        expectedNegative = true;
    }

    const negative = expectedNegative === true;
    const number = new BigInteger(actualValue);
    assert.equal(number.realLength, expectedAbsoluteValue.length);
    assert.equal(number.isZero, expectedAbsoluteValue == "0");
    assert.equal(number.negative, negative);
    for (let i=0; i<expectedAbsoluteValue.length; i++) {
        assert.equal(number.digits[i], expectedAbsoluteValue.charAt(expectedAbsoluteValue.length - i - 1));
    }
}

function bigIntegerFromString(str) {
    if (str.charAt(0) == '-') {
        return new BigInteger(str.substr(1), true);
    } else {
        return new BigInteger(str, false);
    }
}
describe("BigInteger", function() {

    /***************************************/
    /* INITIALIZATION FROM NUMBER          */
    const numberInitializationCases = [ 0, 1, 2, 3, 5, 8, 13, 21, Number.MAX_SAFE_INTEGER ];
    for (let nic of numberInitializationCases) {
        it(`should be initialized from Number ${nic}`, function() {
            assertToString(String(nic), nic);
        });
    }
    /***************************************/
    /* INVALID NUMBER INITIALIZATION       */
    it("should throw an Range error of negative value", function() {
        assert.throws(function() {
            return new BigInteger(-10);
        }, RangeError);
    });

    /***************************************/
    /* INITIALIZATION FROM STRING          */
    const validStringRepresentations = [ "0", "1", "2" ];
    for (let vsr of validStringRepresentations) {
        it (`should be initialized from string ${vsr}`, function() {
            assertToString(vsr, new BigInteger(vsr));
        });
    }

    /***************************************/
    /* INVALID STRING INITIALIZATIONS      */
    const invalidStringRepresentations = ["-10", "hello", "1-1" ];
    for (let isr of invalidStringRepresentations) {
        it(`should be throw exception instantiating from string ${isr}`, function() {
           assert.throws(function() {
               return new BigInteger(isr);
           }, RangeError);
        });
    }
    it("should be throw type error instantiating from empty string", function() {
        assert.throws(function() {
            return new BigInteger("");
        }, TypeError);
    });

    /***************************************/
    /* ADDITION                            */
    const additionCases = [
        ["0", "1", "1"],
        ["1", "2", "3"],
        ["123456789", "234567890", "358024679"],
        ["93845789345798347589734598713458973489578934571", "89027358937458973495723498572938457", "93845789345887374948672057686954696988151873028"],
        [
            "034895738945789347593485789347589347598347598347593487593487534985734957389475893475893475893475349587389457938459287345987234958729348572893475892347598127390",
            "0000000000893745897394857893475893475389457893457389475893475893475934957348957495873894579348753495873489573894758923475892374597234895892347598273458972349578",
            "34895739839535244988343682823482822987805491804982963486963428461669914738433389349788055242228845460879031833218210821879609555964244465241074165806570476968"
        ],
        ["3", "-1", "2"],
        [
            "034895738945789347593485789347589347598347598347593487593487534985734957389475893475893475893475349587389457938459287345987234958729348572893475892347598127390",
            "-0000000000893745897394857893475893475389457893457389475893475893475934957348957495873894579348753495873489573894758923475892374597234895892347598273458972349578",
            "34895738052043450198627895871695872208889704890204011700011641509800000040518397601998896544721853713899884043700363870094860361494452680545877618888625777812"
        ],
        ["13", "-21", "-8"],
        [
        "0000000000893745897394857893475893475389457893457389475893475893475934957348957495873894579348753495873489573894758923475892374597234895892347598273458972349578",
        "-034895738945789347593485789347589347598347598347593487593487534985734957389475893475893475893475349587389457938459287345987234958729348572893475892347598127390",
        "-34895738052043450198627895871695872208889704890204011700011641509800000040518397601998896544721853713899884043700363870094860361494452680545877618888625777812"
        ],
        ["-21", "-13", "-34"],
        ["21", "0", "21"],
        ["21", "-0", "21"]
    ];
    for (let ac of additionCases) {
        it(`should be calculate addition properly: (${ac[0]}) + (${ac[1]}) == ${ac[2]}`, function() {
            assertToString(
                ac[2],
                bigIntegerFromString(ac[0]).add(bigIntegerFromString(ac[1]))
            );
        })
    }
    const fibonacciCases = [
        [2, "1"],
        [3, "2"],
        [5, "5"],
        [100, "354224848179261915075"],
        [1000, "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875"],
        [10000, "33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875"]
    ];

    for (let n of fibonacciCases) {
        it(`should calculate (${n[0]}) fibonacci numbers (${n[1]})`, function () {
            let pp = new BigInteger("0");
            let p = new BigInteger("1");
            for (let index = 2; index <= n[0]; index++) {
                let x = pp.add(p);
                pp = p;
                p = x;
            }
            assertToString(n[1], p)
        });
    }

    const subtractionCases = [
        ["2", "1", "1"],
        ["1", "2", "-1"],
        ["-2", "1", "-3"],
        ["-2", "-1", "-1"],
        ["2", "-1", "3"],
        [
            "33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875",
            "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875",
            "33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507621608053825740066312933070967490085495876522105289276761033340170493306286996373157087498275074884772254748663190874498477553942316367029573179126625611921334548862624131732145047655117528589935514893098138000"
        ]
    ];

    for (let n of subtractionCases) {
        it (`should calculate subtraction properly: (${n[0]}) - (${n[1]}) == (${n[2]})`, function() {
            assertToString(n[2], bigIntegerFromString(n[0]).subtract(bigIntegerFromString(n[1])));
        });
    }

    const multiplicationCases = [
        ["2", "1", "2"],
        ["-2", "1", "-2"],
        ["2", "-3", "-6"],
        ["-3", "-9", "27"],
        ["2", "6", "12"],
        ["9", "9", "81"],
        ["12", "12", "144"],
        [
            "345789347598324758972349857928347589234758923475",
            "349578239578923734905839048590234850928345908234095829058",
            "120880431398566909193929108276519231025480926813534065732857928855661505541346444986407916281643703336550"
        ],
        [
            "9387567834657863487568273465786",
            "9823742736487123647816234786",
            "92221051329000341769019343645451603149635509394277314031796"
        ]
    ];

    for (let n of multiplicationCases) {
        it(`]should calculate multiplication properly: (${n[0]}) * (${n[1]}) == (${n[2]})`, function() {
            const result = bigIntegerFromString(n[0]).multiply(bigIntegerFromString(n[1]));
            assertToString(n[2], result);
        });
    }
});